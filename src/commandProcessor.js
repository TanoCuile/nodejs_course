/* eslint-disable max-len */
// В цьому файлі відбувається обробка команди введеної кеорстувачем у відповідних параметрах
// В даному випадку ми використовуємо аргументи процесу за допомогою пакету `yargs`,
// проте можна і на пряму підчас виконання запитувати користувача (для прикладу: https://www.npmjs.com/package/inquirer)
const yargs = require('yargs');
// Імпортуємо необхідні дані з конфігурації
const {
  HOST_PARAMETER_NAME,
  PORT_PARAMETER_NAME,
  hostParameterConfiguration,
  portParameterConfigurtion,
} = require('./config');

/**
 * Функція для зручного запуску обробника команд
 *
 * Для того щоб описати JsDoc для callback ми використовуємо наступну конструкцію:
 * (назва_параметру: тип_параметрі, назва_наступного_параметру: тип_наступного_параметру) => ти_даних_відповіді
 * У випадку з Promise, та іншими генеративними(тими що не до кінця визначені) типами використовується `<...>`
 * де потрібно вказати підтипи інформації, які використовуватимуться (більше про це ви дізнаєтесь на курсі TypeScript)
 * any - системний тип, який позначає будь-який тип. У нашому випадку не важливо, що повертатиметься при запускові сервера.
 * @param {(payload: RunServerPayload) => Promise<any>} runServerCallaback
 */
function runUserCommand(runServerCallaback) {
  // Для того, щоб запустити вірну команду а також, щоб надати коректну підказку
  // нам потрібно описати всі можливі команди та їх параметри
  yargs
    // Просто назва нашого скріпта, для зручності виводу підказки
    .scriptName('run-server')
    // Описуємо формат, в якій черговості повинна бути записана команда
    .usage('$0 <cmd> [args]')
    // Описуємо власне команду
    // В першому параметрі вказується почерговість позиційних параметрів,
    // тобто як буде записаний 1,2,3 і т.д. введений параметр підчас виконання програми
    // у нашому випадку перший парамтр буде рахуватись як `host` наступний `port`
    .command(
      `run [${HOST_PARAMETER_NAME}] [${PORT_PARAMETER_NAME}]`,
      // Просто опис для підказки
      'Run server',
      // Для опису параметрів команди ми використовуємо callback
      // Параметром якого є конструктор команди
      (command) => {
        // Додаємо відповідні позиційні параметри команди
        command.positional(HOST_PARAMETER_NAME, hostParameterConfiguration);
        command.positional(PORT_PARAMETER_NAME, portParameterConfigurtion);
        // Окрім позиційних параметрів ми можемо додати опціональні: command.option('option', {})
        // які будуть передаватись за допомогою: --key=value
      },
      // Врешті передаємо обробник команди
      (args) => {
        runServerCallaback(args);
      },
    )
    .help().argv;
}

exports.runUserCommand = runUserCommand;
